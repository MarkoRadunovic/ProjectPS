/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.ac.bg.fon.ps.view.form;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import rs.ac.bg.fon.ps.controller.Controller;
import rs.ac.bg.fon.ps.domain.MeasurementUnit;
import rs.ac.bg.fon.ps.domain.Showpiece;
import rs.ac.bg.fon.ps.view.form.component.table.ShowpieceTableModel;
import rs.ac.bg.fon.ps.view.form.util.FormMode;

/**
 *
 * @author Korisnik
 */
public class FrmViewShowpieces extends javax.swing.JDialog {

    /**
     * Creates new form FrmViewShowpieces
     */
    public FrmViewShowpieces(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prepareView();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblShowpieces = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblShowpieces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "Weight", "MU", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShowpieces.setToolTipText("");
        jScrollPane1.setViewportView(tblShowpieces);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(btnDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDetails)))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        addNewShowpiece();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int row = tblShowpieces.getSelectedRow();
        if(row>=0){
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete selected showpiece?", "Confirm", JOptionPane.YES_NO_OPTION);
            if(response == JOptionPane.YES_OPTION){
                try {
                    ShowpieceTableModel stm = (ShowpieceTableModel) tblShowpieces.getModel();
                    Showpiece showpiece = stm.getShowpieceAt(row);
                    deleteShowpiece(showpiece,row);
                    JOptionPane.showMessageDialog(this, "Showpiece deleted.");                
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "You need to select showpiece!");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        new FrmShowpiece(null, true, FormMode.FORM_VIEW).setVisible(true);
    }//GEN-LAST:event_btnDetailsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblShowpieces;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        setTitle("View showpieces");
        //fillTblShowpieces();
        fillTblShowpiecesTM();
    }

    private void fillTblShowpieces() {
        List<Showpiece> showpieces = Controller.getInstance().getAllShowpieces();
        
        DefaultTableModel model = (DefaultTableModel) tblShowpieces.getModel();
        
        for (Showpiece showpiece : showpieces) {
            
            Object[] rowData = new Object[]{showpiece.getId(),showpiece.getName(),showpiece.getDescription(),showpiece.getWeight(),
                                            showpiece.getMeasurementUnit(),showpiece.getAge()};
            model.addRow(rowData);
        }
        
    }

    private void fillTblShowpiecesTM() {
        List<Showpiece> showpieces = Controller.getInstance().getAllShowpieces();
        ShowpieceTableModel stm = new ShowpieceTableModel(showpieces);
        tblShowpieces.setModel(stm);
        
        
        JComboBox cmbMeasurementUnit = new JComboBox<>(MeasurementUnit.values());
        
        TableColumnModel tcm = tblShowpieces.getColumnModel();
        TableColumn tc = tcm.getColumn(4);
        tc.setCellEditor(new DefaultCellEditor(cmbMeasurementUnit));
        
    }

    private void addNewShowpiece() {
        Showpiece showpiece = new Showpiece();
        ShowpieceTableModel stm = (ShowpieceTableModel) tblShowpieces.getModel();
        stm.addShowpiece(showpiece);
        
    }

    private void deleteShowpiece(Showpiece showpiece,int row) throws Exception {
        Controller.getInstance().deleteShowpiece(showpiece);
        ShowpieceTableModel stm = (ShowpieceTableModel) tblShowpieces.getModel();
        stm.deleteShowpiece(row);
    }
}
